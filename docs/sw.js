const VERSION="v3",STATIC_CACHE="story-app-static-v3",API_CACHE="story-app-api-v3",staticAssets=["/","/index.html","/manifest.json","/styles.css","/src/main.js","/src/router.js","/src/presenters/pagePresenter.js","/src/models/apiModel.js","/src/models/dataModel.js","/src/db/favorite-db.js","/scripts/pwa-init.js","/src/views/homeView.js","/src/views/aboutView.js","/src/views/contactView.js","/src/views/mapView.js","/src/views/addstoryView.js","/src/views/favoritesView.js","/src/views/login-page.js","/src/views/register-page.js","/icons/icon-192x192.png","/icons/icon-512x512.png","https://unpkg.com/leaflet@1.9.4/dist/leaflet.css","https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"];self.addEventListener("install",e=>{console.log("🔧 Service Worker v3 installing..."),e.waitUntil(Promise.all([caches.open(STATIC_CACHE).then(e=>(console.log("📦 Caching static assets"),e.addAll(staticAssets))),caches.open(API_CACHE).then(()=>console.log("📦 API cache created"))])),self.skipWaiting()}),self.addEventListener("activate",e=>{console.log("✅ Service Worker v3 activated"),e.waitUntil((async()=>{const e=await caches.keys();await Promise.all(e.filter(e=>e!==STATIC_CACHE&&e!==API_CACHE).map(e=>(console.log(`🗑️ Deleting old cache: ${e}`),caches.delete(e)))),await self.clients.claim();const t=await self.clients.matchAll({type:"window"});for(const e of t)e.postMessage({type:"SW_UPDATED",version:"v3"})})())}),self.addEventListener("fetch",e=>{const t=new URL(e.request.url);"GET"===e.request.method&&(t.pathname.startsWith("/api")||("https://story-api.dicoding.dev"!==t.origin?e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(t=>{if(t&&200===t.status&&"basic"===t.type){const s=t.clone();caches.open(STATIC_CACHE).then(t=>t.put(e.request,s))}return t}))):e.respondWith(fetch(e.request).then(t=>{if(t&&200===t.status){const s=t.clone();caches.open(API_CACHE).then(t=>t.put(e.request,s))}return t}).catch(()=>caches.match(e.request).then(e=>e||new Response(JSON.stringify({error:!0,message:"Offline or network failed"}),{headers:{"Content-Type":"application/json"},status:503}))))))}),self.addEventListener("push",e=>{console.log("📬 Push notification received");let t={title:"Cerita Baru!",options:{body:"Cek cerita terbaru di aplikasi!",icon:"/icons/icon-192x192.png",badge:"/icons/icon-192x192.png",data:{url:"/#/"}}};if(e.data)try{const s=e.data.json();s.title&&(t.title=s.title),s.options&&(t.options={...t.options,...s.options}),s.body&&!s.options&&(t.options.body=s.body),s.icon&&(t.options.icon=s.icon),s.url&&(t.options.data={url:s.url}),console.log("📬 Notification payload:",s)}catch(e){console.error("❌ Failed to parse push notification:",e)}t.options.actions=[{action:"view",title:"Lihat",icon:"/icons/icon-192x192.png"},{action:"dismiss",title:"Tutup"}],e.waitUntil(self.registration.showNotification(t.title,t.options))}),self.addEventListener("notificationclick",e=>{if(console.log("🖱️ Notification clicked:",e.action),e.notification.close(),"view"!==e.action&&e.action)"dismiss"===e.action&&console.log("📭 Notification dismissed");else{const t=e.notification.data?.url||"/#/";e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(e=>{for(const s of e)if(s.url===t&&"focus"in s)return s.focus();if(clients.openWindow)return clients.openWindow(t)}))}}),self.addEventListener("sync",e=>{console.log("🔄 Background sync triggered:",e.tag),"sync-stories"===e.tag&&e.waitUntil(Promise.resolve())}),self.addEventListener("message",e=>{console.log("💬 Message received from client:",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting()});